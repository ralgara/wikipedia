AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Python HTTP wrapper and Lambda layer solution
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
    Description: Environment name for resource naming
Resources:
  LayerBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-layer-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  LayerS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LayerBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: ${LayerBucket.Arn}/*
  RequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: requests-layer-${Environment}
      Description: Layer containing requests package
      CompatibleRuntimes:
      - python3.8
      - python3.9
      - python3.10
      Content:
        S3Bucket:
          Ref: LayerBucket
        S3Key: layer.zip
      LicenseInfo: MIT
  ExampleFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: http-wrapper-example-${Environment}
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: "import http.client\nimport json\nimport urllib.parse\nfrom typing\
          \ import Optional, Dict, Any, Union\n\nclass HttpWrapper:\n    @staticmethod\n\
          \    def get_json(url: str) -> Optional[Dict[str, Any]]:\n        \"\"\"\
          \n        Fetch JSON from a URL using http.client instead of requests\n\n\
          \        Args:\n            url: The URL to fetch from\n\n        Returns:\n\
          \            Parsed JSON data as dictionary or None if request fails\n \
          \       \"\"\"\n        parsed_url = urllib.parse.urlparse(url)\n\n    \
          \    # Get hostname and path\n        hostname = parsed_url.netloc\n   \
          \     path = parsed_url.path\n        if parsed_url.query:\n           \
          \ path += '?' + parsed_url.query\n\n        # Create connection\n      \
          \  conn = http.client.HTTPSConnection(hostname) if parsed_url.scheme ==\
          \ 'https' else http.client.HTTPConnection(hostname)\n\n        try:\n  \
          \          # Send GET request\n            conn.request('GET', path)\n\n\
          \            # Get response\n            response = conn.getresponse()\n\
          \n            # Check if request was successful\n            if response.status\
          \ == 200:\n                # Read and parse JSON\n                data =\
          \ response.read().decode('utf-8')\n                return json.loads(data)\n\
          \            else:\n                print(f\"Error: Received status code\
          \ {response.status}\")\n                return None\n        except Exception\
          \ as e:\n            print(f\"Error: {e}\")\n            return None\n \
          \       finally:\n            conn.close()\n\n    @staticmethod\n    def\
          \ post_json(url: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n\
          \        \"\"\"\n        Post JSON to a URL using http.client instead of\
          \ requests\n\n        Args:\n            url: The URL to post to\n     \
          \       data: Dictionary to be sent as JSON\n\n        Returns:\n      \
          \      Parsed JSON response as dictionary or None if request fails\n   \
          \     \"\"\"\n        parsed_url = urllib.parse.urlparse(url)\n\n      \
          \  # Get hostname and path\n        hostname = parsed_url.netloc\n     \
          \   path = parsed_url.path\n        if parsed_url.query:\n            path\
          \ += '?' + parsed_url.query\n\n        # Convert data to JSON\n        json_data\
          \ = json.dumps(data)\n\n        # Create connection\n        conn = http.client.HTTPSConnection(hostname)\
          \ if parsed_url.scheme == 'https' else http.client.HTTPConnection(hostname)\n\
          \n        try:\n            # Set headers\n            headers = {\n   \
          \             'Content-Type': 'application/json',\n                'Content-Length':\
          \ str(len(json_data))\n            }\n\n            # Send POST request\n\
          \            conn.request('POST', path, json_data, headers)\n\n        \
          \    # Get response\n            response = conn.getresponse()\n\n     \
          \       # Check if request was successful\n            if response.status\
          \ in [200, 201]:\n                # Read and parse JSON\n              \
          \  data = response.read().decode('utf-8')\n                return json.loads(data)\n\
          \            else:\n                print(f\"Error: Received status code\
          \ {response.status}\")\n                return None\n        except Exception\
          \ as e:\n            print(f\"Error: {e}\")\n            return None\n \
          \       finally:\n            conn.close()\n\ndef lambda_handler(event,\
          \ context):\n    # Example usage of HttpWrapper\n    result = HttpWrapper.get_json('https://jsonplaceholder.typicode.com/todos/1')\n\
          \n    return {\n        'statusCode': 200,\n        'body': json.dumps({\n\
          \            'message': 'Success',\n            'result': result\n     \
          \   })\n    }\n"
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      Layers:
      - Ref: RequestsLayer
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: http-wrapper-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  LayerPackageCreator:
    Type: Custom::LayerPackageCreator
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - LayerPackageCreatorFunction
        - Arn
      DestinationBucket:
        Ref: LayerBucket
      DestinationKey: layer.zip
  LayerPackageCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LayerPackageCreatorRole
        - Arn
      Code:
        ZipFile: "import cfnresponse\nimport boto3\nimport os\nimport subprocess\n\
          import shutil\nimport tempfile\n\ndef handler(event, context):\n    try:\n\
          \        if event['RequestType'] in ['Create', 'Update']:\n            #\
          \ Create temporary directory\n            temp_dir = tempfile.mkdtemp()\n\
          \            layer_dir = os.path.join(temp_dir, 'python')\n            os.makedirs(layer_dir)\n\
          \n            # Create requirements.txt\n            with open(os.path.join(temp_dir,\
          \ 'requirements.txt'), 'w') as f:\n                f.write('requests==2.31.0\\\
          n')\n\n            # Install requirements\n            subprocess.check_call([\n\
          \                'pip',\n                'install',\n                '-r',\
          \ os.path.join(temp_dir, 'requirements.txt'),\n                '-t', layer_dir\n\
          \            ])\n\n            # Create zip file\n            shutil.make_archive(os.path.join(temp_dir,\
          \ 'layer'), 'zip', temp_dir)\n\n            # Upload to S3\n           \
          \ s3 = boto3.client('s3')\n            s3.upload_file(\n               \
          \ os.path.join(temp_dir, 'layer.zip'),\n                event['ResourceProperties']['DestinationBucket'],\n\
          \                event['ResourceProperties']['DestinationKey']\n       \
          \     )\n\n            # Cleanup\n            shutil.rmtree(temp_dir)\n\n\
          \            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n\
          \        else:\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ {})\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n\
          \        cfnresponse.send(event, context, cfnresponse.FAILED, {})\n"
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
  LayerPackageCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
              Fn::Sub: ${LayerBucket.Arn}/*
Outputs:
  LayerArn:
    Description: ARN of the created Lambda Layer
    Value:
      Ref: RequestsLayer
  LayerVersion:
    Description: Version of the created Lambda Layer
    Value:
      Fn::GetAtt:
      - RequestsLayer
      - Version
  ExampleFunctionArn:
    Description: ARN of the example Lambda function
    Value:
      Fn::GetAtt:
      - ExampleFunction
      - Arn
  LayerBucketName:
    Description: Name of the S3 bucket containing the layer package
    Value:
      Ref: LayerBucket
