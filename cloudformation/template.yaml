Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for resource naming

  CreateNewBucket:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to create a new S3 bucket or use an existing one

  ExistingBucketName:
    Type: String
    Default: ""
    Description: Name of the existing S3 bucket to use if CreateNewBucket is false

Resources:
  LayerBucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewBucketCondition
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-layer-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LayerS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !If [CreateNewBucketCondition, !Ref LayerBucket, !Ref ExistingBucketName]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub ${!If [CreateNewBucketCondition, LayerBucket.Arn, ExistingBucketName]}/*

Conditions:
  CreateNewBucketCondition: !Equals [!Ref CreateNewBucket, "true"]

Outputs:
  LayerBucketName:
    Description: Name of the S3 bucket containing the layer package
    Value: !If [CreateNewBucketCondition, !Ref LayerBucket, !Ref ExistingBucketName]